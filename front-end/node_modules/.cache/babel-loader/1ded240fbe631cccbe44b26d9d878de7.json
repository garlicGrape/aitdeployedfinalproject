{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\SanchitKumar\\\\dev\\\\finalproject-deployed\\\\front-end\\\\src\\\\StockDisplay.js\";\nimport React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { useHistory, withRouter } from 'react-router-dom';\nimport { AgGridReact } from \"ag-grid-react\";\nimport 'ag-grid-community/dist/styles/ag-grid.css';\nimport 'ag-grid-community/dist/styles/ag-theme-balham.css';\nimport \"./styles.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass StockDisplay extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      columnDefs: [{\n        headerName: \"Athlete\",\n        field: \"athlete\",\n        width: 150,\n        suppressSizeToFit: true\n      }, {\n        headerName: \"Age\",\n        field: \"age\",\n        width: 90,\n        minWidth: 50,\n        maxWidth: 100\n      }, {\n        headerName: \"Country\",\n        field: \"country\",\n        width: 120\n      }, {\n        headerName: \"Year\",\n        field: \"year\",\n        width: 90\n      }, {\n        headerName: \"Date\",\n        field: \"date\",\n        width: 110\n      }, {\n        headerName: \"Sport\",\n        field: \"sport\",\n        width: 110\n      }, {\n        headerName: \"Gold\",\n        field: \"gold\",\n        width: 100\n      }, {\n        headerName: \"Silver\",\n        field: \"silver\",\n        width: 100\n      }, {\n        headerName: \"Bronze\",\n        field: \"bronze\",\n        width: 100\n      }, {\n        headerName: \"Total\",\n        field: \"total\",\n        width: 100\n      }],\n      rowData: []\n    };\n  }\n\n  _fetchData(cb) {\n    const httpRequest = new XMLHttpRequest();\n\n    const updateData = data => {\n      // this.setState({ rowData: data });\n      cb(data);\n    };\n\n    httpRequest.open(\"GET\", \"https://raw.githubusercontent.com/ag-grid/ag-grid-docs/master/src/olympicWinnersSmall.json\");\n    httpRequest.send();\n\n    httpRequest.onreadystatechange = () => {\n      if (httpRequest.readyState === 4 && httpRequest.status === 200) {\n        updateData(JSON.parse(httpRequest.responseText));\n      }\n    };\n  }\n\n  onGridReady(params) {\n    console.log(params);\n    this.gridApi = params.api;\n    this.gridColumnApi = params.columnApi;\n    var that = this;\n    params.api.setDatasource({\n      getRows(params) {\n        console.log(\"getRows\", params);\n\n        that._fetchData(data => params.successCallback(data));\n      }\n\n    });\n  }\n\n  sizeToFit() {\n    this.gridApi.sizeColumnsToFit();\n  }\n\n  autoSizeAll() {\n    var allColumnIds = [];\n    this.gridColumnApi.getAllColumns().forEach(function (column) {\n      allColumnIds.push(column.colId);\n    });\n    this.gridColumnApi.autoSizeColumns(allColumnIds);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: \"100%\",\n        height: \"100%\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"grid-wrapper\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"myGrid\",\n          style: {\n            boxSizing: \"border-box\",\n            height: \"100%\",\n            width: \"100%\"\n          },\n          className: \"ag-theme-balham\",\n          children: /*#__PURE__*/_jsxDEV(AgGridReact, {\n            rowModelType: \"infinite\",\n            columnDefs: this.state.columnDefs,\n            enableColResize: true,\n            onGridReady: this.onGridReady.bind(this),\n            rowData: this.state.rowData,\n            enableFilter: true,\n            enableSorting: true,\n            enableServerSideFilter: true,\n            enableServerSideSorting: true,\n            onFilterModified: (...a) => console.log(\"onFilterModified\", ...a),\n            onFilterChanged: (...a) => console.log(\"onFilterChanged\", ...a)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"button-bar\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.sizeToFit.bind(this),\n          children: \"Size to Fit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.autoSizeAll.bind(this),\n          children: \"Auto-Size All\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default _c = withRouter(StockDisplay);\n\nvar _c;\n\n$RefreshReg$(_c, \"%default%\");","map":{"version":3,"sources":["C:/Users/SanchitKumar/dev/finalproject-deployed/front-end/src/StockDisplay.js"],"names":["React","Component","ReactDOM","useHistory","withRouter","AgGridReact","StockDisplay","constructor","props","state","columnDefs","headerName","field","width","suppressSizeToFit","minWidth","maxWidth","rowData","_fetchData","cb","httpRequest","XMLHttpRequest","updateData","data","open","send","onreadystatechange","readyState","status","JSON","parse","responseText","onGridReady","params","console","log","gridApi","api","gridColumnApi","columnApi","that","setDatasource","getRows","successCallback","sizeToFit","sizeColumnsToFit","autoSizeAll","allColumnIds","getAllColumns","forEach","column","push","colId","autoSizeColumns","render","height","boxSizing","bind","a"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { useHistory, withRouter } from 'react-router-dom';\n\nimport { AgGridReact } from \"ag-grid-react\";\nimport 'ag-grid-community/dist/styles/ag-grid.css';\nimport 'ag-grid-community/dist/styles/ag-theme-balham.css';\n\nimport \"./styles.css\";\n\nclass StockDisplay extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      columnDefs: [\n        {\n          headerName: \"Athlete\",\n          field: \"athlete\",\n          width: 150,\n          suppressSizeToFit: true\n        },\n        {\n          headerName: \"Age\",\n          field: \"age\",\n          width: 90,\n          minWidth: 50,\n          maxWidth: 100\n        },\n        {\n          headerName: \"Country\",\n          field: \"country\",\n          width: 120\n        },\n        {\n          headerName: \"Year\",\n          field: \"year\",\n          width: 90\n        },\n        {\n          headerName: \"Date\",\n          field: \"date\",\n          width: 110\n        },\n        {\n          headerName: \"Sport\",\n          field: \"sport\",\n          width: 110\n        },\n        {\n          headerName: \"Gold\",\n          field: \"gold\",\n          width: 100\n        },\n        {\n          headerName: \"Silver\",\n          field: \"silver\",\n          width: 100\n        },\n        {\n          headerName: \"Bronze\",\n          field: \"bronze\",\n          width: 100\n        },\n        {\n          headerName: \"Total\",\n          field: \"total\",\n          width: 100\n        }\n      ],\n      rowData: []\n    };\n  }\n\n  _fetchData(cb) {\n    const httpRequest = new XMLHttpRequest();\n    const updateData = data => {\n      // this.setState({ rowData: data });\n      cb(data);\n    };\n\n    httpRequest.open(\n      \"GET\",\n      \"https://raw.githubusercontent.com/ag-grid/ag-grid-docs/master/src/olympicWinnersSmall.json\"\n    );\n    httpRequest.send();\n    httpRequest.onreadystatechange = () => {\n      if (httpRequest.readyState === 4 && httpRequest.status === 200) {\n        updateData(JSON.parse(httpRequest.responseText));\n      }\n    };\n  }\n\n  onGridReady(params) {\n    console.log(params);\n    this.gridApi = params.api;\n    this.gridColumnApi = params.columnApi;\n    var that = this;\n    params.api.setDatasource({\n      getRows(params) {\n        console.log(\"getRows\", params);\n        that._fetchData(data => params.successCallback(data));\n      }\n    });\n  }\n\n  sizeToFit() {\n    this.gridApi.sizeColumnsToFit();\n  }\n  autoSizeAll() {\n    var allColumnIds = [];\n    this.gridColumnApi.getAllColumns().forEach(function(column) {\n      allColumnIds.push(column.colId);\n    });\n    this.gridColumnApi.autoSizeColumns(allColumnIds);\n  }\n  render() {\n    return (\n      <div style={{ width: \"100%\", height: \"100%\" }}>\n        <div class=\"grid-wrapper\">\n          <div\n            id=\"myGrid\"\n            style={{\n              boxSizing: \"border-box\",\n              height: \"100%\",\n              width: \"100%\"\n            }}\n            className=\"ag-theme-balham\"\n          >\n            <AgGridReact\n              rowModelType=\"infinite\"\n              columnDefs={this.state.columnDefs}\n              enableColResize={true}\n              onGridReady={this.onGridReady.bind(this)}\n              rowData={this.state.rowData}\n              enableFilter={true}\n              enableSorting={true}\n              enableServerSideFilter={true}\n              enableServerSideSorting={true}\n              onFilterModified={(...a) => console.log(\"onFilterModified\", ...a)}\n              onFilterChanged={(...a) => console.log(\"onFilterChanged\", ...a)}\n            />\n          </div>\n        </div>\n        <div class=\"button-bar\">\n          <button onClick={this.sizeToFit.bind(this)}>Size to Fit</button>\n          <button onClick={this.autoSizeAll.bind(this)}>Auto-Size All</button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default withRouter(StockDisplay);"]},"metadata":{},"sourceType":"module"}