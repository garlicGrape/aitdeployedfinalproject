{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\SanchitKumar\\\\dev\\\\finalproject-deployed\\\\front-end\\\\src\\\\StockDetail.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, useContext } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { AgGridReact } from 'ag-grid-react';\nimport 'ag-grid-community/dist/styles/ag-grid.css';\nimport 'ag-grid-community/dist/styles/ag-theme-balham.css';\nimport { LineChart, Line, CartesianGrid, XAxis, YAxis, Legend, Tooltip, ResponsiveContainer } from 'recharts';\nimport { Input, Button } from 'reactstrap';\nimport { StockContext } from './StockContext';\nimport CoinGecko from 'coingecko-api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst columns = [{\n  headerName: \"Date\",\n  field: \"timestamp\",\n  sortable: true\n}, {\n  headerName: \"Open\",\n  field: \"open\",\n  sortable: true,\n  filter: \"agNumberColumnFilter\"\n}, {\n  headerName: \"High\",\n  field: \"high\",\n  sortable: true,\n  filter: \"agNumberColumnFilter\"\n}, {\n  headerName: \"Low\",\n  field: \"low\",\n  sortable: true,\n  filter: \"agNumberColumnFilter\"\n}, {\n  headerName: \"Close\",\n  field: \"close\",\n  sortable: true,\n  filter: \"agNumberColumnFilter\"\n}, {\n  headerName: \"Volumes\",\n  field: \"volumes\",\n  sortable: true,\n  filter: \"agNumberColumnFilter\"\n}];\n\nasync function calGecko() {\n  const CoinGeckoClient = new CoinGecko();\n  let data = await CoinGeckoClient.exchanges.fetchTickers('bitfinex', {\n    coin_ids: ['bitcoin', 'ethereum', 'ripple', 'litecoin', 'stellar']\n  });\n  var _coinList = {};\n\n  var _datacc = data.data.tickers.filter(t => t.target === 'USD');\n\n  ['BTC', 'ETH', 'XRP', 'LTC', 'XLM'].forEach(i => {\n    var _temp = _datacc.filter(t => t.base === i);\n\n    var _res = _temp.length === 0 ? [] : _temp[0];\n\n    _coinList[i] = _res.last;\n  });\n  console.log(_coinList);\n  return _coinList;\n}\n\nfunction StockDetail(props) {\n  _s();\n\n  const {\n    symbol\n  } = useParams();\n  const [stockHistory, setStockHistory] = useState([]); // save all the original data, won't be changed later\n\n  const [startDate, setStartDate] = useState(\"\"); // start date user selects from the calendar widget\n\n  const {\n    selectedStock\n  } = useContext(StockContext);\n  useEffect(() => {\n    //fetch(`http://131.181.190.87:3001/history?symbol=${symbol}`)\n    calGecko().then(res => res.json()).then(data => {\n      data.forEach(record => {\n        // record.timestamp is something like \"2020-03-23T14:00:00.000Z\"\n        record.timestamp = record.timestamp.split(\"T\")[0];\n      });\n      setStockHistory(data);\n    });\n  }, [symbol]); // symbol is one dependency\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container mt-3\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [selectedStock ? selectedStock.name : \"(company name)\", \" [\", symbol, \"] \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"d-flex\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        style: {\n          paddingTop: 5\n        },\n        children: \"Select Date From:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Input, {\n        style: {\n          width: 200\n        },\n        type: \"date\",\n        value: startDate,\n        onChange: event => setStartDate(event.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        color: \"primary\",\n        className: \"ml-2\",\n        onClick: () => setStartDate(\"\"),\n        children: \"Reset\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"ag-theme-balham\",\n      style: {\n        height: \"362px\",\n        width: \"100%\",\n        marginTop: 20,\n        marginBottom: 20\n      },\n      children: [\" \", /*#__PURE__*/_jsxDEV(AgGridReact, {\n        columnDefs: columns,\n        rowData: stockHistory.filter(record => record.timestamp > startDate),\n        pagination: true,\n        paginationPageSize: 10\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n      width: \"100%\",\n      height: 300,\n      children: /*#__PURE__*/_jsxDEV(LineChart, {\n        margin: {\n          top: 20,\n          right: 20,\n          bottom: 5,\n          left: 0\n        },\n        data: stockHistory.filter(record => record.timestamp > startDate).reverse(),\n        children: [/*#__PURE__*/_jsxDEV(Line, {\n          type: \"monotone\",\n          dataKey: \"close\",\n          stroke: \"#8884d8\",\n          dot: false\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(CartesianGrid, {\n          stroke: \"#ccc\",\n          strokeDasharray: \"5 5\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n          dataKey: \"timestamp\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Legend, {\n          verticalAlign: \"top\",\n          formatter: () => /*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"Closing Price\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 66\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 9\n  }, this);\n}\n\n_s(StockDetail, \"8+xICeCf1MND8KG/X3TiS7K6NIk=\", false, function () {\n  return [useParams];\n});\n\n_c = StockDetail;\nexport default StockDetail;\n\nvar _c;\n\n$RefreshReg$(_c, \"StockDetail\");","map":{"version":3,"sources":["C:/Users/SanchitKumar/dev/finalproject-deployed/front-end/src/StockDetail.js"],"names":["React","useEffect","useState","useContext","useParams","AgGridReact","LineChart","Line","CartesianGrid","XAxis","YAxis","Legend","Tooltip","ResponsiveContainer","Input","Button","StockContext","CoinGecko","columns","headerName","field","sortable","filter","calGecko","CoinGeckoClient","data","exchanges","fetchTickers","coin_ids","_coinList","_datacc","tickers","t","target","forEach","i","_temp","base","_res","length","last","console","log","StockDetail","props","symbol","stockHistory","setStockHistory","startDate","setStartDate","selectedStock","then","res","json","record","timestamp","split","name","paddingTop","width","event","value","height","marginTop","marginBottom","top","right","bottom","left","reverse"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useContext } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport { AgGridReact } from 'ag-grid-react';\nimport 'ag-grid-community/dist/styles/ag-grid.css';\nimport 'ag-grid-community/dist/styles/ag-theme-balham.css';\n\nimport { LineChart, Line, CartesianGrid, XAxis, YAxis, Legend, Tooltip, ResponsiveContainer } from 'recharts';\nimport { Input, Button } from 'reactstrap';\nimport { StockContext } from './StockContext';\n\nimport CoinGecko from  'coingecko-api';\n\nconst columns = [\n    { headerName: \"Date\", field: \"timestamp\", sortable: true },\n    { headerName: \"Open\", field: \"open\", sortable: true, filter: \"agNumberColumnFilter\" },\n    { headerName: \"High\", field: \"high\", sortable: true, filter: \"agNumberColumnFilter\" },\n    { headerName: \"Low\", field: \"low\", sortable: true, filter: \"agNumberColumnFilter\" },\n    { headerName: \"Close\", field: \"close\", sortable: true, filter: \"agNumberColumnFilter\" },\n    { headerName: \"Volumes\", field: \"volumes\", sortable: true, filter: \"agNumberColumnFilter\" },\n];\n\nasync function calGecko(){\n    const CoinGeckoClient = new CoinGecko();\n    let data = await CoinGeckoClient.exchanges.fetchTickers('bitfinex', {\n        coin_ids: ['bitcoin', 'ethereum', 'ripple', 'litecoin', 'stellar']\n    });\n    var _coinList = {};\n    var _datacc = data.data.tickers.filter(t => t.target === 'USD');\n    [\n        'BTC',\n        'ETH',\n        'XRP',\n        'LTC',\n        'XLM'\n    ].forEach((i) => {\n        var _temp = _datacc.filter(t => t.base === i);\n        var _res = _temp.length === 0 ? [] : _temp[0];\n        _coinList[i] = _res.last;\n    })\n    console.log(_coinList);\n    return _coinList;\n}\n\nfunction StockDetail(props) {\n    const { symbol } = useParams();\n\n    const [stockHistory, setStockHistory] = useState([]); // save all the original data, won't be changed later\n    const [startDate, setStartDate] = useState(\"\"); // start date user selects from the calendar widget\n\n    const { selectedStock } = useContext(StockContext);\n\n\n    useEffect(() => {\n        //fetch(`http://131.181.190.87:3001/history?symbol=${symbol}`)\n        calGecko()\n            .then(res => res.json())\n            .then(data => {\n                data.forEach(record => {\n                    // record.timestamp is something like \"2020-03-23T14:00:00.000Z\"\n                    record.timestamp = record.timestamp.split(\"T\")[0]\n                });\n\n                setStockHistory(data);\n            })\n    }, [symbol]) // symbol is one dependency\n\n\n    return (\n        <div className=\"container mt-3\">\n\n            <h2>{selectedStock ? selectedStock.name : \"(company name)\"} [{symbol}] </h2>\n\n            <div className=\"d-flex\">\n                <span style={{ paddingTop: 5 }}>Select Date From:</span>\n                <Input style={{ width: 200 }} type=\"date\" value={startDate} onChange={(event) => setStartDate(event.target.value)} />\n                <Button color=\"primary\" className=\"ml-2\" onClick={() => setStartDate(\"\")}>Reset</Button>\n            </div>\n\n            <div\n                className=\"ag-theme-balham\"\n                style={{\n                    height: \"362px\",\n                    width: \"100%\",\n                    marginTop: 20,\n                    marginBottom: 20,\n                }}\n            > {/* ag-grid-table */}\n\n                <AgGridReact\n                    columnDefs={columns}\n                    rowData={stockHistory.filter(record => record.timestamp > startDate)}\n                    pagination={true}\n                    paginationPageSize={10}\n                />\n            </div>\n\n            <ResponsiveContainer width=\"100%\" height={300} >\n                <LineChart\n                    margin={{ top: 20, right: 20, bottom: 5, left: 0 }}\n                    data={stockHistory.filter(record => record.timestamp > startDate).reverse()}\n                >\n                    <Line type=\"monotone\" dataKey=\"close\" stroke=\"#8884d8\" dot={false} />\n                    <CartesianGrid stroke=\"#ccc\" strokeDasharray=\"5 5\" />\n                    <XAxis dataKey=\"timestamp\" />\n                    <YAxis />\n                    <Legend verticalAlign=\"top\" formatter={() => <span>Closing Price</span>} />\n                    <Tooltip />\n                </LineChart>\n            </ResponsiveContainer>\n\n\n        </div>\n    )\n}\n\n\nexport default StockDetail;"]},"metadata":{},"sourceType":"module"}