{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\SanchitKumar\\\\dev\\\\finalproject-deployed\\\\front-end\\\\src\\\\StockOverview.js\",\n    _s = $RefreshSig$();\n\n/*import React, { useState, useEffect, useContext } from 'react';\n\nimport { AgGridReact } from 'ag-grid-react';\nimport 'ag-grid-community/dist/styles/ag-grid.css';\nimport 'ag-grid-community/dist/styles/ag-theme-balham.css';\nimport { useHistory, withRouter } from 'react-router-dom';\nimport { FormGroup, Label, Input } from 'reactstrap';\nimport { StockContext } from './StockContext';\n\nimport CoinGecko from  'coingecko-api';\n\nconst columns = [\n    { headerName: \"Symbol\", field: \"symbol\", sortable: true },\n    { headerName: \"Name\", field: \"name\", sortable: true, \"filter\": true },\n    { headerName: \"Industry\", field: \"industry\", sortable: true, \"filter\": true }\n];\n\nconst industries = [\"Health Care\", \"Industrials\", \"Consumer Discretionary\", \"Information Technology\",\n    \"Consumer Staples\", \"Utilities\", \"Financials\", \"Real Estate\", \"Materials\", \"Energy\", \"Telecommunication Services\"]\n\n    async function callGecko(){\n        const CoinGeckoClient = new CoinGecko();\n        let data = await CoinGeckoClient.exchanges.fetchTickers('bitfinex', {\n            coin_ids: ['bitcoin', 'ethereum', 'ripple', 'litecoin', 'stellar']\n        });\n        var _coinList = {};\n        var _datacc = data.data.tickers.filter(t => t.target === 'USD');\n        [\n            'BTC',\n            'ETH',\n            'XRP',\n            'LTC',\n            'XLM'\n        ].forEach((i) => {\n            var _temp = _datacc.filter(t => t.base === i);\n            var _res = _temp.length === 0 ? [] : _temp[0];\n            _coinList[i] = _res.last;\n        })\n        //console.log(_coinList);\n        return JSON.stringify(_coinList);\n    }\n\nfunction StockOverview(props) {\n\n    const [stocks, setStocks] = useState([{stock: {symbol:'BTC', name:'BitCoin', industry:'Crypto'} },{stock: {symbol:'ETH', name:'Ethereum', industry:'Crypto'} }]); // all stocks, is used to save all the original data, would not be changed even when a user searches\n    const [searchStockSymbol, setSearchStockSymbol] = useState(\"\"); // the search text user enter in the text box\n    const { path } = props.match; // \"/stock\"\n    const history = useHistory();\n    const { setSelectedStock } = useContext(StockContext);\n\n    //const [stocks] = useState([{stock: {symbol:'BTC', name:'BitCoin', industry:'Crypto'} },{stock: {symbol:'ETH', name:'Ethereum', industry:'Crypto'} }]);\n\n    useEffect(() => {\n        //fetch('http://131.181.190.87:3001/all')\n        callGecko()\n            //.then(res => res.json())\n            .then(data => {\n                \n                console.log(data);\n                \n                //setStocks(data);\n            })\n    }, []) //[] means no dependencies, treated as componentDidMount in class component, only render once\n\n\n    const onIndustrySelectChange = (value) => {\n        let url = `http://131.181.190.87:3001/industry?industry=${value}`; // url to fetch stocks belong to a particular industry\n\n        // if value is \"all\", which means the option is \"In All Industries\", fetch all data again\n        if (value === \"all\") url = \"http://131.181.190.87:3001/all\";\n\n        fetch(url)\n            .then(res => res.json())\n            .then(data => {\n                //setStocks(data);\n            })\n    }\n\n\n    // navigate to stock detail page\n    const handleSearchStockDetail = (stock) => { // stock: {symbol:xxx, name:xxx, industry:xxx}\n        history.push(`${path}/${stock.symbol}`);\n        setSelectedStock(stock);\n    }\n //rowData={stocks.filter(stock => RegExp(searchStockSymbol, \"i\").test(stock.symbol))}\n\n    return (\n        <div className=\"container mt-3\">\n            <h2>Stock Overview</h2>\n\n            <div className=\"d-flex justify-content-around\">\n                <FormGroup>\n                    <Label for=\"stockCode\">search stock</Label>\n                    <Input\n                        type=\"text\"\n                        placeholder=\"e.g. AAPL\"\n                        name=\"stockCode\"\n                        id=\"stockCode\"\n                        value={searchStockSymbol}\n                        onChange={(event) => setSearchStockSymbol(event.target.value.replace('\\\\',''))} // event.target.value is the text user entered\n                    />\n                </FormGroup>\n\n                <FormGroup>\n                    <Label for=\"industry\">select an industry</Label>\n                    <Input\n                        type=\"select\"\n                        name=\"industry\"\n                        id=\"industry\"\n                        onChange={(event) => onIndustrySelectChange(event.target.value)}>\n\n                        <option value=\"all\">All Industries</option>\n                        {industries.map(industry => <option value={industry} key={industry}>{industry}</option>)}\n\n                    </Input>\n                </FormGroup>\n            </div>\n\n            <div\n                className=\"ag-theme-balham mx-auto ag-theme-alpine \"\n                style={{\n                    height: \"650px\",\n                    width: \"600px\",\n                   marginTop: 50,\n                   boxSizing: \"border-box\"\n                }}\n            \n            >\n                <AgGridReact \n                    columnDefs={columns}\n        \n                    rowData ={stocks}\n                    pagination={true}\n                    paginationPageSize={20}\n                    //onGridReady={this.onGridReady.bind(this)}\n                    //onCellClicked={(params) => handleSearchStockDetail(params.data)}\n                    onCellClicked={(params) => console.log(params.data)}\n                \n                />\n\n            </div>\n\n        </div>\n    );\n}*/\nimport React, { useState } from 'react';\nimport { AgGridReact } from 'ag-grid-react';\nimport { useHistory, withRouter } from 'react-router-dom';\nimport CoinGecko from 'coingecko-api';\nimport 'ag-grid-community/dist/styles/ag-grid.css';\nimport 'ag-grid-community/dist/styles/ag-theme-alpine.css'; // Create Singleton entries for the data ad ColumnDefs\n// const InitialRowData = [\n//     {make: \"Toyota\", model: \"Celica\", price: 35000},\n//     {make: \"Ford\", model: \"Mondeo\", price: 32000},\n//     {make: \"Porsche\", model: \"Boxter\", price: 72000}\n// ];\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction StockOverview(props) {\n  _s();\n\n  // set to default data\n  const [rowData, setRowData] = useState();\n  const [colDefs, setColDefs] = useState([{\n    field: 'symbol'\n  }, {\n    field: 'bidPrice'\n  }, {\n    field: 'askPrice'\n  }, {\n    field: 'lastPrice',\n    editable: 'true'\n  }]); // Uncomment this to see the changing column data in action\n  // React.useEffect(\n  //     ()=> {\n  //     const changeColsTimer = setTimeout(() =>{\n  //         setColDefs([{field: 'make'},{field: 'model'}])\n  //         },3000);\n  //     return ()=>clearTimeout(changeColsTimer);\n  //         }\n  // ,[]);\n  // load the data after the grid has been setup\n  //[] means on first render so no need to memo the results at this point\n\n  React.useEffect(() => {\n    //fetch('https://www.ag-grid.com/example-assets/row-data.json')\n    fetch('https://api2.binance.com/api/v3/ticker/24hr').then(result => result.json()).then(rowData => setRowData(rowData));\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"ag-theme-alpine\",\n    style: {\n      height: 400,\n      width: 800\n    },\n    children: /*#__PURE__*/_jsxDEV(AgGridReact, {\n      defaultColDef: {\n        sortable: true,\n        filter: true\n      },\n      pagination: true,\n      rowData: rowData,\n      columnDefs: colDefs\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 12\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 195,\n    columnNumber: 8\n  }, this);\n}\n\n_s(StockOverview, \"WQ1CndSM2aL5LdCW7CrL5GhOzqI=\");\n\n_c = StockOverview;\n;\nexport default _c2 = withRouter(StockOverview);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"StockOverview\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["C:/Users/SanchitKumar/dev/finalproject-deployed/front-end/src/StockOverview.js"],"names":["React","useState","AgGridReact","useHistory","withRouter","CoinGecko","StockOverview","props","rowData","setRowData","colDefs","setColDefs","field","editable","useEffect","fetch","then","result","json","height","width","sortable","filter"],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,SAAQC,WAAR,QAA0B,eAA1B;AACA,SAASC,UAAT,EAAqBC,UAArB,QAAuC,kBAAvC;AACA,OAAOC,SAAP,MAAuB,eAAvB;AAEA,OAAO,2CAAP;AACA,OAAO,mDAAP,C,CAEA;AAEA;AACA;AACA;AACA;AACA;;;;AAIA,SAASC,aAAT,CAAuBC,KAAvB,EAA+B;AAAA;;AAE3B;AACA,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBR,QAAQ,EAAtC;AACA,QAAM,CAACS,OAAD,EAAUC,UAAV,IAAwBV,QAAQ,CAAC,CACnC;AAACW,IAAAA,KAAK,EAAE;AAAR,GADmC,EAEnC;AAACA,IAAAA,KAAK,EAAE;AAAR,GAFmC,EAEf;AAACA,IAAAA,KAAK,EAAE;AAAR,GAFe,EAGnC;AAACA,IAAAA,KAAK,EAAE,WAAR;AAAqBC,IAAAA,QAAQ,EAAE;AAA/B,GAHmC,CAAD,CAAtC,CAJ2B,CAU3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;AACAb,EAAAA,KAAK,CAACc,SAAN,CAAgB,MAAM;AAClB;AACAC,IAAAA,KAAK,CAAC,6CAAD,CAAL,CACKC,IADL,CACUC,MAAM,IAAIA,MAAM,CAACC,IAAP,EADpB,EAEKF,IAFL,CAEUR,OAAO,IAAIC,UAAU,CAACD,OAAD,CAF/B;AAGH,GALD,EAKG,EALH;AAOD,sBACI;AAAK,IAAA,SAAS,EAAC,iBAAf;AAAiC,IAAA,KAAK,EAAE;AAACW,MAAAA,MAAM,EAAE,GAAT;AAAcC,MAAAA,KAAK,EAAE;AAArB,KAAxC;AAAA,2BACI,QAAC,WAAD;AACK,MAAA,aAAa,EAAE;AAACC,QAAAA,QAAQ,EAAE,IAAX;AAAiBC,QAAAA,MAAM,EAAE;AAAzB,OADpB;AAEK,MAAA,UAAU,EAAE,IAFjB;AAGK,MAAA,OAAO,EAAEd,OAHd;AAIK,MAAA,UAAU,EAAEE;AAJjB;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAYF;;GAzCQJ,a;;KAAAA,a;AAyCR;AAED,qBAAeF,UAAU,CAACE,aAAD,CAAzB","sourcesContent":["/*import React, { useState, useEffect, useContext } from 'react';\n\nimport { AgGridReact } from 'ag-grid-react';\nimport 'ag-grid-community/dist/styles/ag-grid.css';\nimport 'ag-grid-community/dist/styles/ag-theme-balham.css';\nimport { useHistory, withRouter } from 'react-router-dom';\nimport { FormGroup, Label, Input } from 'reactstrap';\nimport { StockContext } from './StockContext';\n\nimport CoinGecko from  'coingecko-api';\n\nconst columns = [\n    { headerName: \"Symbol\", field: \"symbol\", sortable: true },\n    { headerName: \"Name\", field: \"name\", sortable: true, \"filter\": true },\n    { headerName: \"Industry\", field: \"industry\", sortable: true, \"filter\": true }\n];\n\nconst industries = [\"Health Care\", \"Industrials\", \"Consumer Discretionary\", \"Information Technology\",\n    \"Consumer Staples\", \"Utilities\", \"Financials\", \"Real Estate\", \"Materials\", \"Energy\", \"Telecommunication Services\"]\n\n    async function callGecko(){\n        const CoinGeckoClient = new CoinGecko();\n        let data = await CoinGeckoClient.exchanges.fetchTickers('bitfinex', {\n            coin_ids: ['bitcoin', 'ethereum', 'ripple', 'litecoin', 'stellar']\n        });\n        var _coinList = {};\n        var _datacc = data.data.tickers.filter(t => t.target === 'USD');\n        [\n            'BTC',\n            'ETH',\n            'XRP',\n            'LTC',\n            'XLM'\n        ].forEach((i) => {\n            var _temp = _datacc.filter(t => t.base === i);\n            var _res = _temp.length === 0 ? [] : _temp[0];\n            _coinList[i] = _res.last;\n        })\n        //console.log(_coinList);\n        return JSON.stringify(_coinList);\n    }\n\nfunction StockOverview(props) {\n\n    const [stocks, setStocks] = useState([{stock: {symbol:'BTC', name:'BitCoin', industry:'Crypto'} },{stock: {symbol:'ETH', name:'Ethereum', industry:'Crypto'} }]); // all stocks, is used to save all the original data, would not be changed even when a user searches\n    const [searchStockSymbol, setSearchStockSymbol] = useState(\"\"); // the search text user enter in the text box\n    const { path } = props.match; // \"/stock\"\n    const history = useHistory();\n    const { setSelectedStock } = useContext(StockContext);\n\n    //const [stocks] = useState([{stock: {symbol:'BTC', name:'BitCoin', industry:'Crypto'} },{stock: {symbol:'ETH', name:'Ethereum', industry:'Crypto'} }]);\n\n    useEffect(() => {\n        //fetch('http://131.181.190.87:3001/all')\n        callGecko()\n            //.then(res => res.json())\n            .then(data => {\n                \n                console.log(data);\n                \n                //setStocks(data);\n            })\n    }, []) //[] means no dependencies, treated as componentDidMount in class component, only render once\n\n\n    const onIndustrySelectChange = (value) => {\n        let url = `http://131.181.190.87:3001/industry?industry=${value}`; // url to fetch stocks belong to a particular industry\n\n        // if value is \"all\", which means the option is \"In All Industries\", fetch all data again\n        if (value === \"all\") url = \"http://131.181.190.87:3001/all\";\n\n        fetch(url)\n            .then(res => res.json())\n            .then(data => {\n                //setStocks(data);\n            })\n    }\n\n\n    // navigate to stock detail page\n    const handleSearchStockDetail = (stock) => { // stock: {symbol:xxx, name:xxx, industry:xxx}\n        history.push(`${path}/${stock.symbol}`);\n        setSelectedStock(stock);\n    }\n //rowData={stocks.filter(stock => RegExp(searchStockSymbol, \"i\").test(stock.symbol))}\n\n    return (\n        <div className=\"container mt-3\">\n            <h2>Stock Overview</h2>\n\n            <div className=\"d-flex justify-content-around\">\n                <FormGroup>\n                    <Label for=\"stockCode\">search stock</Label>\n                    <Input\n                        type=\"text\"\n                        placeholder=\"e.g. AAPL\"\n                        name=\"stockCode\"\n                        id=\"stockCode\"\n                        value={searchStockSymbol}\n                        onChange={(event) => setSearchStockSymbol(event.target.value.replace('\\\\',''))} // event.target.value is the text user entered\n                    />\n                </FormGroup>\n\n                <FormGroup>\n                    <Label for=\"industry\">select an industry</Label>\n                    <Input\n                        type=\"select\"\n                        name=\"industry\"\n                        id=\"industry\"\n                        onChange={(event) => onIndustrySelectChange(event.target.value)}>\n\n                        <option value=\"all\">All Industries</option>\n                        {industries.map(industry => <option value={industry} key={industry}>{industry}</option>)}\n\n                    </Input>\n                </FormGroup>\n            </div>\n\n            <div\n                className=\"ag-theme-balham mx-auto ag-theme-alpine \"\n                style={{\n                    height: \"650px\",\n                    width: \"600px\",\n                   marginTop: 50,\n                   boxSizing: \"border-box\"\n                }}\n            \n            >\n                <AgGridReact \n                    columnDefs={columns}\n        \n                    rowData ={stocks}\n                    pagination={true}\n                    paginationPageSize={20}\n                    //onGridReady={this.onGridReady.bind(this)}\n                    //onCellClicked={(params) => handleSearchStockDetail(params.data)}\n                    onCellClicked={(params) => console.log(params.data)}\n                \n                />\n\n            </div>\n\n        </div>\n    );\n}*/\n\nimport React, {useState} from 'react';\nimport {AgGridReact} from 'ag-grid-react';\nimport { useHistory, withRouter } from 'react-router-dom';\nimport CoinGecko from  'coingecko-api';\n\nimport 'ag-grid-community/dist/styles/ag-grid.css';\nimport 'ag-grid-community/dist/styles/ag-theme-alpine.css';\n\n// Create Singleton entries for the data ad ColumnDefs\n\n// const InitialRowData = [\n//     {make: \"Toyota\", model: \"Celica\", price: 35000},\n//     {make: \"Ford\", model: \"Mondeo\", price: 32000},\n//     {make: \"Porsche\", model: \"Boxter\", price: 72000}\n// ];\n\n\n\nfunction StockOverview(props)  {\n\n    // set to default data\n    const [rowData, setRowData] = useState();\n    const [colDefs, setColDefs] = useState([\n        {field: 'symbol'},\n        {field: 'bidPrice'},{field: 'askPrice'},\n        {field: 'lastPrice', editable: 'true'},\n    ]);\n\n    // Uncomment this to see the changing column data in action\n    // React.useEffect(\n    //     ()=> {\n    //     const changeColsTimer = setTimeout(() =>{\n    //         setColDefs([{field: 'make'},{field: 'model'}])\n    //         },3000);\n    //     return ()=>clearTimeout(changeColsTimer);\n    //         }\n    // ,[]);\n\n    // load the data after the grid has been setup\n    //[] means on first render so no need to memo the results at this point\n    React.useEffect(() => {\n        //fetch('https://www.ag-grid.com/example-assets/row-data.json')\n        fetch('https://api2.binance.com/api/v3/ticker/24hr')\n            .then(result => result.json())\n            .then(rowData => setRowData(rowData))\n    }, []);\n\n   return (\n       <div className=\"ag-theme-alpine\" style={{height: 400, width: 800}}>   \n           <AgGridReact\n                defaultColDef={{sortable: true, filter: true }}\n                pagination={true}\n                rowData={rowData}\n                columnDefs={colDefs}>\n           </AgGridReact>\n       </div>\n       \n   )\n\n};\n\nexport default withRouter(StockOverview);"]},"metadata":{},"sourceType":"module"}